name: Release macOS Desktop App

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true

jobs:
  release:
    runs-on: macos-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          node-version: "22.14.0"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install sst
        run: "curl -fsSL https://ion.sst.dev/install | bash"

      - name: Configure Production AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::093827727335:role/prompt-saver-production-github
          aws-region: eu-north-1

      # Install monorepo deps with Bun (for SST, other packages)
      - name: Install monorepo dependencies
        run: |
          rm -rf node_modules
          rm -rf ~/.bun/install/cache
          rm -rf packages/**/node_modules
          bun install --frozen-lockfile

      # Ensure all transitive dependencies are installed
      - name: Install desktop dependencies
        run: |
          cd packages/desktop
          bun install --frozen-lockfile
          # Also install dependencies for workspace packages
          cd ../core
          bun install --frozen-lockfile

      - name: Deploy SST
        run: |
          unset AWS_PROFILE
          sst install
          sst deploy --stage=production

      # ✅ Rebuild native modules for Electron ABI
      - name: Rebuild native modules for Electron
        run: |
          cd packages/desktop
          # Rebuild all native modules
          npx electron-rebuild -f
        continue-on-error: false

      - name: Bump version
        id: version
        run: |
          cd packages/desktop
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG" == *"chore(desktop): bump version"* ]]; then
            echo "Skipping version bump"
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json','utf8'));pkg.version='$NEW_VERSION';fs.writeFileSync('package.json',JSON.stringify(pkg,null,2)+'\\n');"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore(desktop): bump version to $NEW_VERSION"
          git push

      - name: Create environment file
        run: |
          cd packages/desktop
          cat > .env.production << EOF
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          VITE_AUTH_URL=${{ secrets.VITE_AUTH_URL }}
          VITE_STAGE=production
          VITE_REALTIME_ENDPOINT=${{ secrets.VITE_REALTIME_ENDPOINT }}
          VITE_AUTHORIZER=${{ secrets.VITE_AUTHORIZER }}
          EOF

      - name: Import Code Signing Certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

      # 🏗️ Build Electron app using npm-installed dependencies
      - name: Build Electron App
        run: |
          cd packages/desktop
          bun run build:mac
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_AUTH_URL: ${{ secrets.VITE_AUTH_URL }}
          VITE_STAGE: production
          VITE_REALTIME_ENDPOINT: ${{ secrets.VITE_REALTIME_ENDPOINT }}
          VITE_AUTHORIZER: ${{ secrets.VITE_AUTHORIZER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
          CSC_NAME: "Developer ID Application: Pietari Immonen (6D2UT4969T)"

      - name: Upload macOS DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-dmg
          path: packages/desktop/dist/*.dmg
          if-no-files-found: error
