name: Release macOS Desktop App

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true

jobs:
  release:
    runs-on: macos-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          node-version: "22.14.0"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install SST
        run: "curl -fsSL https://ion.sst.dev/install | bash"

      - name: Configure Production AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::093827727335:role/prompt-saver-production-github
          aws-region: eu-north-1

      # 🧩 Install monorepo dependencies with pnpm
      - name: Install monorepo dependencies (pnpm)
        run: |
          rm -rf node_modules packages/**/node_modules
          pnpm install --frozen-lockfile

      - name: Debug MQTT dependencies
        run: |
          echo "=== Checking packages/desktop/node_modules ==="
          ls -la packages/desktop/node_modules/ | head -20 || echo "No node_modules in desktop"
          echo ""
          echo "=== Searching for mqtt in desktop ==="
          find packages/desktop/node_modules -maxdepth 2 -name "mqtt*" -o -name "bl" || echo "Nothing found"
          echo ""
          echo "=== Checking pnpm virtual store ==="
          find node_modules/.pnpm -maxdepth 2 -name "*mqtt*" 2>/dev/null | head -10 || echo "No .pnpm store"
          echo ""
          echo "=== Checking if mqtt is in package.json ==="
          grep -A2 "mqtt" packages/desktop/package.json || echo "mqtt not in package.json"
        continue-on-error: false

      # 🧱 Deploy SST using pnpm-installed deps
      - name: Deploy SST
        run: |
          unset AWS_PROFILE
          sst install
          sst deploy --stage=production

      - name: Bump version
        id: version
        run: |
          cd packages/desktop
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG" == *"chore(desktop): bump version"* ]]; then
            echo "Skipping version bump"
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json','utf8'));pkg.version='$NEW_VERSION';fs.writeFileSync('package.json',JSON.stringify(pkg,null,2)+'\\n');"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore(desktop): bump version to $NEW_VERSION"
          git push

      - name: Create environment file
        run: |
          cd packages/desktop
          cat > .env.production << EOF
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          VITE_AUTH_URL=${{ secrets.VITE_AUTH_URL }}
          VITE_STAGE=production
          VITE_REALTIME_ENDPOINT=${{ secrets.VITE_REALTIME_ENDPOINT }}
          VITE_AUTHORIZER=${{ secrets.VITE_AUTHORIZER }}
          VITE_SONIOX_API_KEY=${{ secrets.VITE_SONIOX_API_KEY }}
          EOF

      - name: Import Code Signing Certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

      # 🏗️ Build Electron App (Bun used as runtime, deps installed via pnpm)
      - name: Build Electron App
        run: |
          cd packages/desktop
          rm -rf dist out ~/.electron-builder
          bun run build:mac
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_AUTH_URL: ${{ secrets.VITE_AUTH_URL }}
          VITE_STAGE: production
          VITE_REALTIME_ENDPOINT: ${{ secrets.VITE_REALTIME_ENDPOINT }}
          VITE_AUTHORIZER: ${{ secrets.VITE_AUTHORIZER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_SONIOX_API_KEY: ${{ secrets.VITE_SONIOX_API_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Verify DMG Contents
        run: |
          cd packages/desktop/dist
          ls -lh *.dmg
          DMG_FILE=$(ls *.dmg | head -n 1)
          echo "Verifying DMG: $DMG_FILE"
          hdiutil attach "$DMG_FILE" -mountpoint /tmp/clyo-verify
          echo "Checking for mqtt dependencies..."
          if [ -d "/tmp/clyo-verify/Clyo Desktop.app/Contents/Resources/app.asar.unpacked/node_modules/mqtt" ]; then
            echo "✅ mqtt found in unpacked asar"
          else
            echo "⚠️ mqtt not found in unpacked asar"
          fi
          echo "Contents of app.asar.unpacked:"
          ls -la "/tmp/clyo-verify/Clyo Desktop.app/Contents/Resources/app.asar.unpacked/" || echo "No unpacked directory found"
          hdiutil detach /tmp/clyo-verify
        continue-on-error: true

      - name: Upload macOS DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-dmg
          path: packages/desktop/dist/*.dmg
          if-no-files-found: error

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd packages/desktop
          VERSION="${{ steps.version.outputs.version }}"
          TAG_NAME="v${VERSION}"

          # Check if release already exists
          if gh release view "$TAG_NAME" --repo PietariImmonen/prompt-sst &>/dev/null; then
            echo "Release $TAG_NAME already exists, deleting it..."
            gh release delete "$TAG_NAME" --repo PietariImmonen/prompt-sst --yes
          fi

          # Check if tag exists and delete it
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
            echo "Tag $TAG_NAME exists, deleting it..."
            git push origin --delete "$TAG_NAME" || true
          fi

          # Create new release with DMG and metadata files
          echo "Creating release $TAG_NAME..."
          gh release create "$TAG_NAME" \
            --repo PietariImmonen/prompt-sst \
            --title "Clyo Desktop v${VERSION}" \
            --notes "Auto-generated release for Clyo Desktop v${VERSION}" \
            dist/*.dmg \
            dist/*.yml \
            dist/*.blockmap
