name: Release macOS Desktop App

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true

jobs:
  release:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install

      - name: Bump version
        id: version
        run: |
          cd packages/desktop

          # Check if this is a version bump commit - skip if it is
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG" == *"chore(desktop): bump version"* ]]; then
            echo "This is a version bump commit, skipping version bump"
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump patch version (e.g., 0.1.0 -> 0.1.1, 0.1.1 -> 0.1.2)
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "New version: $NEW_VERSION"

          # Update package.json version field directly (avoid npm version due to workspace: protocol)
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8')); pkg.version = '$NEW_VERSION'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"

          # Output for later steps
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Commit version bump
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore(desktop): bump version to $NEW_VERSION"
          git push

      - name: Create environment file
        run: |
          cd packages/desktop
          cat > .env.production << EOF
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          VITE_AUTH_URL=${{ secrets.VITE_AUTH_URL }}
          VITE_STAGE=production
          VITE_REALTIME_ENDPOINT=${{ secrets.VITE_REALTIME_ENDPOINT }}
          VITE_AUTHORIZER=${{ secrets.VITE_AUTHORIZER }}
          EOF
          echo "âœ… Created .env.production file"

      - name: Import Code Signing Certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

      - name: Build Electron App
        run: |
          cd packages/desktop
          # Skip env:generate and typecheck since we already have env vars and SST isn't available
          bunx electron-vite build
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_AUTH_URL: ${{ secrets.VITE_AUTH_URL }}
          VITE_STAGE: production
          VITE_REALTIME_ENDPOINT: ${{ secrets.VITE_REALTIME_ENDPOINT }}
          VITE_AUTHORIZER: ${{ secrets.VITE_AUTHORIZER }}

      - name: Package and Release macOS App
        run: |
          cd packages/desktop
          # Only publish on main branch pushes, not on workflow_dispatch or tags without main
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            bunx electron-builder --mac dmg --publish always
          else
            bunx electron-builder --mac dmg --publish never
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_NAME: ${{ secrets.CSC_NAME }}
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_AUTH_URL: ${{ secrets.VITE_AUTH_URL }}
          VITE_STAGE: production
          VITE_REALTIME_ENDPOINT: ${{ secrets.VITE_REALTIME_ENDPOINT }}
          VITE_AUTHORIZER: ${{ secrets.VITE_AUTHORIZER }}

      - name: Upload macOS DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-dmg
          path: packages/desktop/dist/*.dmg
          if-no-files-found: error
