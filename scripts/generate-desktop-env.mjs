#!/usr/bin/env node

/**
 * Generate environment variables for the desktop app from SST outputs
 * This script runs `sst outputs` and creates a .env file for the desktop app
 */
import { execSync } from "child_process";
import { existsSync, writeFileSync } from "fs";
import { dirname, join } from "path";
import { fileURLToPath } from "url";

const __dirname = dirname(fileURLToPath(import.meta.url));
const rootDir = join(__dirname, "..");
const desktopDir = join(rootDir, "packages", "desktop");

const args = process.argv.slice(2);

const getFlag = (flag) => {
  const index = args.indexOf(flag);
  if (index === -1) return undefined;
  return args[index + 1];
};

const mode =
  getFlag("--mode") ??
  process.env.DESKTOP_MODE ??
  (process.env.NODE_ENV === "production" ? "production" : "development");

const stage = getFlag("--stage") ?? process.env.DESKTOP_STAGE ?? process.env.SST_STAGE;

const profile = getFlag("--profile") ?? process.env.SST_PROFILE ?? process.env.AWS_PROFILE;

const defaultStage = mode === "production" ? "production" : "dev";
const requestedStage = stage ?? defaultStage;

const outputFile =
  getFlag("--output") ??
  process.env.DESKTOP_ENV_FILE ??
  (mode === "production" ? ".env.production" : ".env");

const envPath = join(desktopDir, outputFile);

try {
  console.log(`🔄 Fetching SST outputs for stage: ${requestedStage}`);

  let outputs = {};
  let usingFallback = false;
  let skipWriting = false;

  try {
    const env = {
      ...process.env,
      SST_STAGE: requestedStage,
    };
    if (profile) {
      env.AWS_PROFILE = profile;
    }

    const outputsJson = execSync("bunx sst outputs --format json", {
      cwd: rootDir,
      encoding: "utf8",
      env,
    });
    outputs = JSON.parse(outputsJson);
  } catch (sstError) {
    const allowFallback =
      requestedStage === "dev" &&
      getFlag("--no-fallback") === undefined &&
      !process.env.CI;

    if (!allowFallback) {
      if (existsSync(envPath)) {
        console.log(
          `⚠️  Failed to fetch SST outputs for stage "${requestedStage}". Keeping existing ${outputFile}.`,
        );
        skipWriting = true;
      } else {
        throw sstError;
      }
    } else {
      console.log("⚠️  SST not running, using development fallback values");
      usingFallback = true;

      outputs = {
        DesktopApiUrl: "http://localhost:3001/api",
        DesktopAuthUrl: "http://localhost:3001/auth",
        DesktopStage: "dev",
        DesktopRealtimeEndpoint: "localhost",
        DesktopAuthorizer: "dev-authorizer",
      };
    }
  }

  if (skipWriting) {
    console.log(`✅ Preserved ${envPath}`);
    process.exit(0);
  }

  const resolvedStage = outputs.DesktopStage ?? requestedStage;

  const envVars = [
    `VITE_API_URL=${process.env.DESKTOP_API_URL ?? outputs.DesktopApiUrl ?? "http://localhost:3001/api"}`,
    `VITE_AUTH_URL=${process.env.DESKTOP_AUTH_URL ?? outputs.DesktopAuthUrl ?? "http://localhost:3001/auth"}`,
    `VITE_STAGE=${resolvedStage}`,
    `VITE_REALTIME_ENDPOINT=${process.env.DESKTOP_REALTIME_ENDPOINT ?? outputs.DesktopRealtimeEndpoint ?? "localhost"}`,
    `VITE_AUTHORIZER=${process.env.DESKTOP_AUTHORIZER ?? outputs.DesktopAuthorizer ?? "dev-authorizer"}`,
    `VITE_APP_URL=${process.env.DESKTOP_APP_URL ?? "http://localhost:3000"}`,
    `VITE_PUBLIC_APP_URL=${process.env.DESKTOP_PUBLIC_APP_URL ?? "http://localhost:3001"}`,
  ];

  const envContent = [
    "# Auto-generated environment variables from SST outputs",
    usingFallback
      ? "# Using fallback values - start SST with 'bun run dev' for real endpoints"
      : "# Do not edit this file manually - run `bun run desktop:env` instead",
    "# Stage: " + resolvedStage,
    profile ? `# Profile: ${profile}` : undefined,
    "",
    ...envVars,
    "",
  ]
    .filter(Boolean)
    .join("\n");

  writeFileSync(envPath, envContent);

  console.log("✅ Generated desktop environment variables:");
  console.log(`   📁 ${envPath}`);
  if (usingFallback) {
    console.log("   ⚠️  Using fallback values - start SST for real endpoints");
  }
  envVars.forEach((line) => console.log(`   🔧 ${line}`));
} catch (error) {
  console.error("❌ Failed to generate desktop environment variables:");
  console.error(error.message);
  process.exit(1);
}
